


double xi=0, yi=0, xf=0, yf=0, pxi=0, pyi=0, pxf=0, pyf=0;
int count;
for (i=0;i<100000;i+=1)
{


xf+(pxi/m)*t=xi
yf+(pyi/m)*t=yi
pxf-(xf*t)-yf-(pxf/m)+sqrt(2)a=pxi
pyf-(yf*t)-xf-(pyf/m)+sqrt(2)a=pyi

}

xi=xf
yi=yf
pxi=pxf;
pyi=pyf;
count=0;


# define _CRT_SECURE_NO_WARNINGS    // 보안 씹어주는 행
# include <stdio.h>
# include <math.h>
# include <stdlib.h>
# include <time.h>
# include <Windows.h>
# define int N=50000;


double gaussianRandom(void);   // GaussianRandom함수 선행처리

int main()
{
	double a = 0;

	double px = 0, py = 0, x = 0, y = 0;
	int i, j;
	double arr[10000] = { 0, };
	double brr[800] = { 0, };
	FILE*Moon;
	Moon = fopen("C:\\Moon\\Moon4.txt", "wt");

	srand((unsigned)time(NULL));        // rand함수 선행

	for (j = 0; j < 799; j++)
	{
		for (i = 0; i < N; i += 1)      // 500000번 랜덤 찍기
		{
			arr[i] = gaussianRandom();
			a = arr[i];
			if (a > -4 + 0.01*j && -4 + 0.01*(j + 1) > a)
			{
				brr[j] += 1;
			}
		}

		printf("%lf, %lf \n", -4 + 0.01*j, (brr[j]));
		fprintf(Moon, "%lf, %lf \n", -4 + 0.01*j, (brr[j]));
		brr[j] = 0;
	}

	return 0;

}

double gaussianRandom(void)
{
	double v1, v2, s;

	do
	{
		v1 = 2 * ((double)rand() / RAND_MAX) - 1;      // -1.0 ~ 1seq2.0 까지의 값
		v2 = 2 * ((double)rand() / RAND_MAX) - 1;      // -1.0 ~ 1.0 까지의 값
		s = v1 * v1 + v2 * v2;
	}

	while (s >= 1 || s == 0);

	s = sqrt((-2 * log(s)) / s);

	return v1 * s;
}


for (i=0;i<5000;i+=1)
{

	for(j=0;j<5000;j+=1)
	{
		for(k=0;k<5000;k+=1)
		{
			
		}
	}
}