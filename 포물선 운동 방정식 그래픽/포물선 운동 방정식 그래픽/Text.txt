# define _CRT_SECURE_NO_WARNINGS    // 보안 씹어주는 행
# include <stdio.h>
# include <math.h>
# include <stdlib.h>
# include <time.h>
# include <Windows.h>

double gaussianRandom(void);   // GaussianRandom함수 선행처리

int main()
{
	double a = 0;

	int i;
	double arr[5000] = { 0, };
	int brr[8] = { 0, };
	int crr[7] = { 0, };

	FILE*Moon;
	Moon = fopen("C:\\Moon\\Moon4.txt", "wt");

	srand((unsigned)time(NULL));        // rand함수 선행

	for (i = 0; i < 5000; i += 1)      // 5000번 랜덤 찍기
	{
		a = gaussianRandom();
		arr[i] = a;
		if (-4 <= arr[i] && arr[i] < -3)
			brr[1]++;
		else if (-3 <= arr[i] && arr[i] < -2)
			brr[2]++;
		else if (-2 <= arr[i] && arr[i] < -1)
			brr[3]++;
		else if (-1 <= arr[i] && arr[i] < 0)
			brr[4]++;
		else if (0 <= arr[i] && arr[i] < 1)
			brr[5]++;
		else if (1 <= arr[i] && arr[i] < 2)
			brr[6]++;
		else if (2 <= arr[i] && arr[i] < 3)
			brr[7]++;
		else
			brr[8]++;
	}

	for (i = 1; i < 8; i++)
	{
		crr[i] = (i-1, brr[i]);
		printf("%d \n", crr[i]);
		fprintf(Moon, "%d \n", crr[i]);
	}

	return 0;

}

double gaussianRandom(void)
{
	double v1, v2, s;

	do
	{
		v1 = 2 * ((double)rand() / RAND_MAX) - 1;      // -1.0 ~ 1seq2.0 까지의 값
		v2 = 2 * ((double)rand() / RAND_MAX) - 1;      // -1.0 ~ 1.0 까지의 값
		s = v1 * v1 + v2 * v2;
	}

	while (s >= 1 || s == 0);

	s = sqrt((-2 * log(s)) / s);

	return v1 * s;
}


# define _CRT_SECURE_NO_WARNINGS    // 보안 씹어주는 행
# include <stdio.h>
# include <math.h>
# include <stdlib.h>
# include <time.h>
# include <Windows.h>

double gaussianRandom(void);   // GaussianRandom함수 선행처리

int main()
{
	double a = 0;

	int i;
	double arr[5000] = { 0, };
	int A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0;
	int a1 = 0, b1 = 0, c1 = 0, d1 = 0, e1 = 0, f1 = 0, g1 = 0, h1 = 0;

	FILE*Moon;
	Moon = fopen("C:\\Moon\\Moon4.txt", "wt");

	srand((unsigned)time(NULL));        // rand함수 선행

	for (i = 0; i < 5000; i += 1)      // 5000번 랜덤 찍기
	{
		a = gaussianRandom();
		arr[i] = a;
		if (-4 <= arr[i] && arr[i] < -3)
			A++;
		else if (-3 <= arr[i] && arr[i] < -2)
			B++;
		else if (-2 <= arr[i] && arr[i] < -1)
			C++;
		else if (-1 <= arr[i] && arr[i] < 0)
			D++;
		else if (0 <= arr[i] && arr[i] < 1)
			E++;
		else if (1 <= arr[i] && arr[i] < 2)
			F++;
		else if (2 <= arr[i] && arr[i] < 3)
			G++;
		else if (3 <= arr[i] && arr[i] < 4)
			H++;
	}
	a1 = (0, A);
	b1 = (1, B);
	c1 = (2, C);
	d1 = (3, D);
	e1 = (4, E);
	f1 = (5, F);
	g1 = (6, G);
	h1 = (7, H);
	printf("%d \n", a1);
	printf("%d \n", b1);
	printf("%d \n", c1);
	printf("%d \n", d1);
	printf("%d \n", e1);
	printf("%d \n", f1);
	printf("%d \n", g1);
	printf("%d \n", h1);
	fprintf(Moon, "%d \n", a1);
	fprintf(Moon, "%d \n", b1);
	fprintf(Moon, "%d \n", c1);
	fprintf(Moon, "%d \n", d1);
	fprintf(Moon, "%d \n", e1);
	fprintf(Moon, "%d \n", f1);
	fprintf(Moon, "%d \n", g1);
	fprintf(Moon, "%d \n", h1);

	return 0;

}

double gaussianRandom(void)
{
	double v1, v2, s;

	do
	{
		v1 = 2 * ((double)rand() / RAND_MAX) - 1;      // -1.0 ~ 1seq2.0 까지의 값
		v2 = 2 * ((double)rand() / RAND_MAX) - 1;      // -1.0 ~ 1.0 까지의 값
		s = v1 * v1 + v2 * v2;
	}

	while (s >= 1 || s == 0);

	s = sqrt((-2 * log(s)) / s);

	return v1 * s;
}